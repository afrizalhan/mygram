definitions:
  models.CommentInput:
    properties:
      message:
        example: Fotonya bagus!!
        type: string
      photo_id:
        example: 3
        type: integer
    required:
    - message
    - photo_id
    type: object
  models.CommentUpdateInput:
    properties:
      message:
        example: Fotonya Keren!!
        type: string
    required:
    - message
    type: object
  models.GetCommentRes:
    properties:
      Photo:
        properties:
          caption:
            type: string
          id:
            type: integer
          photo_url:
            type: string
          title:
            type: string
          user_id:
            type: integer
        type: object
      User:
        properties:
          email:
            type: string
          id:
            type: integer
          username:
            type: string
        type: object
      created_at:
        type: string
      id:
        type: integer
      message:
        type: string
      photo_id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.GetPhotoRes:
    properties:
      User:
        properties:
          email:
            type: string
          username:
            type: string
        type: object
      caption:
        type: string
      created_at:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.LoginInput:
    properties:
      email:
        example: maryjane@gmail.com
        type: string
      password:
        example: maryjanewats
        type: string
    required:
    - email
    - password
    type: object
  models.PhotoInput:
    properties:
      caption:
        example: Foto di pantai
        type: string
      photo_url:
        example: https://static.vecteezy.com/packs/media/vectors/term-bg-1-666de2d9.jpg
        type: string
      title:
        example: Foto Selfie
        type: string
    required:
    - caption
    - photo_url
    - title
    type: object
  models.RegisterInput:
    properties:
      age:
        example: 8
        type: integer
      email:
        example: maryjane@gmail.com
        type: string
      password:
        example: maryjanewats
        type: string
      username:
        example: maryj
        type: string
    required:
    - age
    - email
    - password
    - username
    type: object
  models.SocialMediaInput:
    properties:
      name:
        example: Github
        type: string
      social_media_url:
        example: github.com/username
        type: string
    type: object
  models.UpdateInput:
    properties:
      email:
        example: johndoe@gmail.com
        type: string
      username:
        example: johndoe
        type: string
    required:
    - email
    - username
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
paths:
  /comments:
    get:
      description: Get every comment that exist on MyGram.
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GetCommentRes'
            type: array
      security:
      - BearerToken: []
      summary: Get all comments from all posts.
      tags:
      - Comments
  /comments/:
    post:
      description: User post a comment on a picture.
      parameters:
      - description: the body to create a photo
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.CommentInput'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Create new comment for a photo.
      tags:
      - Comments
  /comments/{commentId}:
    delete:
      description: Delete a comment by id.
      parameters:
      - description: Comment id
        in: path
        name: commentId
        required: true
        type: string
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
      security:
      - BearerToken: []
      summary: Delete one comment .
      tags:
      - Comments
    put:
      description: Update Comment by id.
      parameters:
      - description: Comment id
        in: path
        name: commentId
        required: true
        type: string
      - description: the body to update comment
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.CommentUpdateInput'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Update Comment.
      tags:
      - Comments
  /photos:
    get:
      description: Get every photo that exist on MyGram.
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GetPhotoRes'
            type: array
      security:
      - BearerToken: []
      summary: Get all Photo from database.
      tags:
      - Photos
  /photos/:
    post:
      description: User post a picture.
      parameters:
      - description: the body to create a photo
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.PhotoInput'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Create new photo data.
      tags:
      - Photos
  /photos/{photoId}:
    delete:
      description: Delete a Photo by id.
      parameters:
      - description: Photo id
        in: path
        name: photoId
        required: true
        type: string
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
      security:
      - BearerToken: []
      summary: Delete one Photo .
      tags:
      - Photos
    put:
      description: Update Photo by id.
      parameters:
      - description: Photo id
        in: path
        name: photoId
        required: true
        type: string
      - description: the body to update photo
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.PhotoInput'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Update Photo.
      tags:
      - Photos
  /socialmedias:
    get:
      description: Get every socials that every user added.
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GetPhotoRes'
            type: array
      security:
      - BearerToken: []
      summary: Get all socials.
      tags:
      - Social Media
  /socialmedias/:
    post:
      description: User add their social media.
      parameters:
      - description: the body to create a social media
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.SocialMediaInput'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Create new social media for user.
      tags:
      - Social Media
  /socialmedias/{socialMediaId}:
    delete:
      description: Delete a Social media by id.
      parameters:
      - description: Social Media id
        in: path
        name: socialMediaId
        required: true
        type: string
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
      security:
      - BearerToken: []
      summary: Delete added social media .
      tags:
      - Social Media
    put:
      description: Update added social media by id.
      parameters:
      - description: Social Media id
        in: path
        name: socialMediaId
        required: true
        type: string
      - description: the body to update social media
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.SocialMediaInput'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Update Social Media.
      tags:
      - Social Media
  /users/{userId}:
    delete:
      description: Delete a User by id.
      parameters:
      - description: User id
        in: path
        name: userId
        required: true
        type: string
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
      security:
      - BearerToken: []
      summary: Delete one User .
      tags:
      - User
    put:
      description: Update User by id.
      parameters:
      - description: User id
        in: path
        name: userId
        required: true
        type: string
      - description: the body to update user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.UpdateInput'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Update User.
      tags:
      - User
  /users/login:
    post:
      description: Logging in to get jwt token to access MyGram.
      parameters:
      - description: the body to login a user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Login as as user.
      tags:
      - User
  /users/register:
    post:
      description: User Register to get access to MyGram.
      parameters:
      - description: the body to register a user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.RegisterInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Register as as user.
      tags:
      - User
swagger: "2.0"
